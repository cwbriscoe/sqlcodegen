package main

import (
	"bufio"
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"go/ast"
	"go/build"
	"go/format"
	"go/parser"
	"go/token"
	"go/types"

	"github.com/jackc/pgx"
)

var conn *pgx.Conn

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf      bytes.Buffer // Accumulated output.
	pkg      *Package     // Package we are scanning.
	name     string       // Name of current struct.
	numParms int          //number of input parameters
	numCols  int          //number of columns in result set
	colNames []string     //list of formatted column names
}

// File holds a single parsed file and associated data.
type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.
}

type Package struct {
	dir      string
	name     string
	defs     map[*ast.Ident]types.Object
	files    []*File
	typesPkg *types.Package
}

var (
	typeNames = flag.String("type", "", "comma-separated list of type names; must be set")
	output    = flag.String("output", "", "output file name; default srcdir/<type>_string.go")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\tstringer [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tstringer [flags[ -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "For more information, see:\n")
	fmt.Fprintf(os.Stderr, "\thttp://godoc.org/golang.org/x/tools/cmd/stringer\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	var err error
	var name string
	var sqlx string

	dbcfg := &pgx.ConnConfig{
		Host:     "localhost",
		Port:     5432,
		Database: "website",
		User:     "dba",
		Password: "dba",
	}

	conn, err = pgx.Connect(*dbcfg)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Unable to connection to database: %v\n", err)
		os.Exit(1)
	}

	name = "test/drop.sql"
	sqlx = readSqlFile(name)
	prepare(name, sqlx)

	name = "test/create.sql"
	sqlx = readSqlFile(name)
	prepare(name, sqlx)

	name = "test/select.sql"
	sqlx = readSqlFile(name)
	prepare(name, sqlx)

	name = "test/update.sql"
	sqlx = readSqlFile(name)
	prepare(name, sqlx)

	name = "test/delete.sql"
	sqlx = readSqlFile(name)
	prepare(name, sqlx)

	log.SetFlags(0)
	log.SetPrefix("sqlgen: ")
	flag.Usage = Usage
	flag.Parse()
	//if len(*typeNames) == 0 {
	//		flag.Usage()
	//		os.Exit(2)
	//	}
	//types := strings.Split(*typeNames, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var (
		dir string
		g   Generator
	)
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
		g.parsePackageDir(args[0])
	} else {
		dir = filepath.Dir(args[0])
		g.parsePackageFiles(args)
	}

	// Print the header and package clause.
	g.Printf("// Code generated by \"stringer %s\"; DO NOT EDIT\n", strings.Join(os.Args[1:], " "))
	g.Printf("package %s\n", g.pkg.name)
	g.Printf("import \"time\"\n")
	g.Printf("import \"github.com/jackc/pgx\"\n")

	g.name = "sqlgentest"
	sqlx = readSqlFile("test/select.sql")
	stmt, err := prepare(g.name, sqlx)
	g.createSql(stmt)
	g.createStructs(stmt)
	g.createSingletonSelect(stmt)

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_sqlgen.go", g.pkg.name)
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err = ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

func readSqlFile(name string) string {
	file, err := os.Open(name)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	var sqlx string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		sqlx += scanner.Text() + "\n"
	}
	//fmt.Println(sqlx)

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	return sqlx
}

func prepare(name string, sqlx string) (*pgx.PreparedStatement, error) {
	stmt, err := conn.Prepare(name, sqlx)
	if err != nil {
		log.Fatal(err)
	}
	return stmt, err
}

// parsePackageDir parses the package residing in the directory.
func (g *Generator) parsePackageDir(directory string) {
	pkg, err := build.Default.ImportDir(directory, 0)
	if err != nil {
		log.Fatalf("cannot process directory %s: %s", directory, err)
	}
	var names []string
	names = append(names, pkg.GoFiles...)
	names = append(names, pkg.CgoFiles...)
	// TODO: Need to think about constants in test files. Maybe write type_string_test.go
	// in a separate pass? For later.
	// names = append(names, pkg.TestGoFiles...) // These are also in the "foo" package.
	names = append(names, pkg.SFiles...)
	names = prefixDirectory(directory, names)
	g.parsePackage(directory, names, nil)
}

// parsePackageFiles parses the package occupying the named files.
func (g *Generator) parsePackageFiles(names []string) {
	g.parsePackage(".", names, nil)
}

// prefixDirectory places the directory name on the beginning of each name in the list.
func prefixDirectory(directory string, names []string) []string {
	if directory == "." {
		return names
	}
	ret := make([]string, len(names))
	for i, name := range names {
		ret[i] = filepath.Join(directory, name)
	}
	return ret
}

func parameterType(oid pgx.Oid) string {
	switch oid {
	case pgx.BoolOid:
		return "bool"
	case pgx.Int2Oid:
		return "int16"
	case pgx.Int4Oid, pgx.OidOid:
		return "int32"
	case pgx.Int8Oid:
		return "int64"
	case pgx.Float4Oid:
		return "float32"
	case pgx.Float8Oid:
		return "float64"
	default:
		return "string"
	}
}

func columnType(fd pgx.FieldDescription) string {
	switch fd.FormatCode {
	case pgx.TextFormatCode:
		return "string"
	case pgx.BinaryFormatCode:
		switch fd.DataType {
		case pgx.BoolOid:
			return "bool"
		case pgx.ByteaOid:
			return "[]byte"
		case pgx.Int2Oid:
			return "int16"
		case pgx.Int4Oid, pgx.OidOid:
			return "int32"
		case pgx.Int8Oid:
			return "int64"
		case pgx.Float4Oid:
			return "float32"
		case pgx.Float8Oid:
			return "float64"
		case pgx.BoolArrayOid:
			return "[]bool"
		case pgx.Int2ArrayOid:
			return "[]int16"
		case pgx.Int4ArrayOid:
			return "[]int32"
		case pgx.Int8ArrayOid:
			return "[]int64"
		case pgx.Float4ArrayOid:
			return "[]float32"
		case pgx.Float8ArrayOid:
			return "[]float64"
		case pgx.TextArrayOid, pgx.VarcharArrayOid:
			return "[]string"
		case pgx.TimestampArrayOid, pgx.TimestampTzArrayOid:
			return "[]time.Time"
		case pgx.DateOid, pgx.TimestampTzOid, pgx.TimestampOid:
			return "time.Time"
		case pgx.InetOid, pgx.CidrOid:
			return "net.IPNet"
		case pgx.VarcharOid, pgx.JsonOid, pgx.JsonbOid:
			return "string"
		default:
			return "unknown oid: " + strconv.Itoa(int(fd.DataType))
		}
	default:
		return "unknown1"
	}
}

// parsePackage analyzes the single package constructed from the named files.
// If text is non-nil, it is a string to be used instead of the content of the file,
// to be used for testing. parsePackage exits if there is an error.
func (g *Generator) parsePackage(directory string, names []string, text interface{}) {
	var files []*File
	var astFiles []*ast.File
	g.pkg = new(Package)
	fs := token.NewFileSet()
	for _, name := range names {
		if !strings.HasSuffix(name, ".go") {
			continue
		}
		if strings.HasSuffix(name, "_sqlgen.go") {
			continue
		}
		parsedFile, err := parser.ParseFile(fs, name, text, 0)
		if err != nil {
			log.Fatalf("parsing package: %s: %s", name, err)
		}
		astFiles = append(astFiles, parsedFile)
		files = append(files, &File{
			file: parsedFile,
			pkg:  g.pkg,
		})
	}
	if len(astFiles) == 0 {
		log.Fatalf("%s: no buildable Go files", directory)
	}
	g.pkg.name = astFiles[0].Name.Name
	g.pkg.files = files
	g.pkg.dir = directory
	// Type check the package.
	//g.pkg.check(fs, astFiles)
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func (g *Generator) createSql(stmt *pgx.PreparedStatement) {
	g.Printf("const " + g.name + "Sql=`\n" + stmt.SQL + "`\n")
}

func (g *Generator) createStructs(stmt *pgx.PreparedStatement) {
	g.numParms, g.numCols = 0, 0
	g.Printf("type " + g.name + "In struct {\n")
	for i, oid := range stmt.ParameterOids {
		typ := parameterType(oid)
		g.Printf("parm" + strconv.Itoa(i+1) + " " + typ + "\n")
		g.numParms++
		oid += 1
	}
	g.Printf("}\n")
	g.Printf("type " + g.name + "Out struct {\n")
	g.colNames = make([]string, 64)
	for i, fd := range stmt.FieldDescriptions {
		typ := columnType(fd)
		g.Printf(fd.Name + " " + typ + "\n")
		g.colNames[i] = fd.Name
		g.numCols++
	}
	g.Printf("}\n")
	g.Printf("type " + g.name + " struct {\n")
	g.Printf("in " + g.name + "In\n")
	g.Printf("out " + g.name + "Out\n")
	g.Printf("}\n")
}

func (g *Generator) createSingletonSelect(stmt *pgx.PreparedStatement) {
	g.Printf("func (d *" + g.name + ") fetch1(c *pgx.Conn) error {\n")
	g.Printf("_,e:=c.Prepare(\"" + g.name + "\"," + g.name + "Sql)\n")
	g.Printf("if e!=nil {return e}\n")
	g.Printf("r:=c.QueryRow(\"" + g.name + "\"")
	for i := 0; i < g.numParms; i++ {
		g.Printf(",d.in.parm" + strconv.Itoa(i+1))
	}
	g.Printf(")\n")
	g.Printf("e=r.Scan(")
	for i := 0; i < g.numCols; i++ {
		if i != 0 {
			g.Printf(",")
		}
		g.Printf("&d.out." + g.colNames[i])
	}
	g.Printf(")\n")
	g.Printf("return e\n")
	g.Printf("}\n")
}
